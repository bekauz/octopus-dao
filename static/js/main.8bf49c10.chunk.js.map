{"version":3,"sources":["App.jsx","index.js"],"names":["sdk","ThirdwebSDK","bundleDrop","getBundleDropModule","tokenModule","getTokenModule","App","useWeb3","connectWallet","address","provider","error","console","log","signer","getSigner","undefined","useState","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","useEffect","getAllClaimerAddresses","then","addresses","catch","err","getAllHolderBalances","amounts","memberList","useMemo","map","tokenAmount","ethers","utils","formatUnits","setProviderOrSigner","balanceOf","balance","gt","className","onClick","member","str","substring","length","disabled","claim","finally","ReactDOM","render","StrictMode","connectors","injected","supportedChainIds","document","getElementById"],"mappings":"+QAMMA,EAAM,IAAIC,IAAY,WACtBC,EAAaF,EAAIG,oBACrB,8CAEIC,EAAcJ,EAAIK,eACtB,8CAkKaC,EA/JH,WAEV,MAAoDC,cAA5CC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,QAAgBC,GAAvC,EAAgCC,MAAhC,EAAuCD,UACvCE,QAAQC,IAAI,0BAA2BJ,GAGvC,IAAMK,EAASJ,EAAWA,EAASK,iBAAcC,EAEjD,EAA0CC,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoDJ,mBAAS,IAA7D,mBAAOK,EAAP,KAA2BC,EAA3B,KACA,EAA8CN,mBAAS,IAAvD,mBAAOO,EAAP,KAAwBC,EAAxB,KAMAC,qBAAU,WACHR,GAILhB,EACGyB,uBAAuB,KACvBC,MAAK,SAACC,GACLjB,QAAQC,IAAI,sBAAuBgB,GACnCJ,EAAmBI,MAClBC,OAAM,SAACC,GACRnB,QAAQD,MAAM,iCAAkCoB,QAEnD,CAACb,IAEJQ,qBAAU,WACHR,GAILd,EACG4B,uBACAJ,MAAK,SAACK,GACLrB,QAAQC,IAAI,iBAAkBoB,GAC9BV,EAAsBU,MACrBH,OAAM,SAACC,GACRnB,QAAQD,MAAM,mCAAoCoB,QAErD,CAACb,IAGJ,IAAMgB,EAAaC,mBAAQ,WACzB,OAAOX,EAAgBY,KAAI,SAAC3B,GAC1B,MAAO,CACLA,UACA4B,YAAaC,IAAOC,MAAMC,YAExBlB,EAAmBb,IAAY,SAIpC,CAACe,EAAiBF,IA8BrB,GA5BAI,qBAAU,WAER1B,EAAIyC,oBAAoB3B,KACvB,CAACA,IAEJY,qBAAU,WAER,GAAKjB,EAIL,OAAOP,EACNwC,UAAUjC,EAAS,KACnBmB,MAAK,SAACe,GACDA,EAAQC,GAAG,IACbzB,GAAiB,GACjBP,QAAQC,IAAI,iCAEZM,GAAiB,GACjBP,QAAQC,IAAI,6CAEbiB,OAAM,SAACnB,GACRQ,GAAiB,GACjBP,QAAQD,MAAM,wBAAyBA,QAExC,CAACF,KAGCA,EACH,OACE,sBAAKoC,UAAU,UAAf,UACE,uDACA,wBAAQC,QAAS,kBAAMtC,EAAc,aAAaqC,UAAU,WAA5D,oCAON,GAAI3B,EACF,OACE,sBAAK2B,UAAU,cAAf,UACE,wDACA,8BACE,gCACE,6CACA,wBAAOA,UAAU,OAAjB,UACE,gCACE,+BACE,yCACA,mDAGJ,gCACGX,EAAWE,KAAI,SAACW,GACf,OACE,+BACE,8BAxGIC,EAwGgBD,EAAOtC,QAvGvC,GAAN,OAAUuC,EAAIC,UAAU,EAAG,GAA3B,cAAmCD,EAAIC,UAAUD,EAAIE,OAAS,OAwG5C,6BAAKH,EAAOV,gBAFLU,EAAOtC,SAvGX,IAACuC,kBAqIxB,OACE,sBAAKH,UAAU,WAAf,UACE,0EACA,wBACEM,SAAU/B,EACV0B,QAAS,kBApBbzB,GAAc,QACdnB,EACGkD,MAAM,IAAK,GACXtB,OAAM,SAACC,GACNV,GAAc,GACdT,QAAQD,MAAM,kBAAmBoB,MAChCsB,SAAQ,WACThC,GAAc,GACdF,GAAiB,GACjBP,QAAQC,IAAI,uBACZD,QAAQC,IAAR,gEAAqEX,EAAWO,QAAhF,WAQF,SAIGW,EAAa,aAAe,6BC9IrCkC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CACEC,WARa,CACjBC,SAAU,IAQNC,kBAlBoB,CAAC,GAgBvB,SAIE,qBAAKd,UAAU,UAAf,SACE,cAAC,EAAD,UAINe,SAASC,eAAe,W","file":"static/js/main.8bf49c10.chunk.js","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ethers } from \"ethers\";\n\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst bundleDrop = sdk.getBundleDropModule(\n  \"0x9E92B1F2B0C7CE7497040ac89eCD2d032E4d01F7\",\n);\nconst tokenModule = sdk.getTokenModule(\n  \"0xcb4D31e042D6DaF220653D092D51b0Aa43f554ec\"\n);\n\nconst App = () => {\n  // connectWallet hook from thirdWeb\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"Connected with address:\", address)\n\n  // used to sign txs on the blockchain (for writing)\n  const signer = provider ? provider.getSigner() : undefined;\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n  const [isClaiming, setIsClaiming] = useState(false);\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n  const [memberAddresses, setMemberAddresses] = useState([]);\n\n  const shortenAddress = (str) => {\n    return `${str.substring(0, 6)}...${str.substring(str.length - 4)}`;\n  };\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    // grab addresses of users who hold the NFT \n    bundleDrop\n      .getAllClaimerAddresses(\"0\")\n      .then((addresses) => {\n        console.log(\"members addresses: \", addresses);\n        setMemberAddresses(addresses);\n      }).catch((err) => {\n        console.error(\"failed to retrieve member list\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    // grab balances of users who hold the erc-20 token\n    tokenModule\n      .getAllHolderBalances()\n      .then((amounts) => {\n        console.log(\"holder amounts\", amounts);\n        setMemberTokenAmounts(amounts);\n      }).catch((err) => {\n        console.error(\"failed to retrieve token amounts\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // combine memberAddresses and memberTokenAmounts\n  const memberList = useMemo(() => {\n    return memberAddresses.map((address) => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits(\n          // return 0 if address is not in memberTokenAmounts\n          memberTokenAmounts[address] || 0,\n        ),\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]);\n\n  useEffect(() => {\n    // pass signer to the sdk\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n\n  useEffect(() => {\n    // skip if user has not connected the wallet yet\n    if (!address) {\n      return;\n    }\n    // check if the user has the membership nft\n    return bundleDrop\n    .balanceOf(address, \"0\")\n    .then((balance) => {\n      if (balance.gt(0)) {\n        setHasClaimedNFT(true);\n        console.log(\"user has the membership NFT\");\n      } else {\n        setHasClaimedNFT(false);\n        console.log(\"user does not have the membership NFT\");\n      }\n    }).catch((error) => {\n      setHasClaimedNFT(false);\n      console.error(\"failed to get balance\", error);\n    });\n  }, [address]);\n  \n  // if user hasn't connected the wallet, display an option to do so\n  if (!address) {\n    return (\n      <div className=\"landing\">\n        <h1>Welcome to OctopusDAO</h1>\n        <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n          Connect your wallet\n        </button>\n      </div>\n    );\n  }\n  // display internal DAO page for users who have claimed the NFT\n  if (hasClaimedNFT) {\n    return (\n      <div className=\"member-page\">\n        <h1>OctopusDAO Member Page</h1>\n        <div>\n          <div>\n            <h2>Member List</h2>\n            <table className=\"card\">\n              <thead>\n                <tr>\n                  <th>Address</th>\n                  <th>Token Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {memberList.map((member) => {\n                  return (\n                    <tr key={member.address}>\n                      <td>{shortenAddress(member.address)}</td>\n                      <td>{member.tokenAmount}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const mintNft = () => {\n    setIsClaiming(true);\n    bundleDrop\n      .claim(\"0\", 1)\n      .catch((err) => {\n        setIsClaiming(false);\n        console.error(\"failed to claim\", err);\n      }).finally(() => {\n        setIsClaiming(false);\n        setHasClaimedNFT(true);\n        console.log(\"Sucessfully minted!\");\n        console.log(`See it on OpenSea: https://testnets.opensea.io/assets/${bundleDrop.address}/0`);\n      });\n  }\n\n  // Render mint nft screen.\n  return (\n    <div className=\"mint-nft\">\n      <h1>Mint your free OctopusDAO Membership NFT</h1>\n      <button\n        disabled={isClaiming}\n        onClick={() => mintNft()}\n      >\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n      </button>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ThirdwebWeb3Provider } from '@3rdweb/hooks';\n\n/**\n * 1 = mainnet\n * 3 = ropsten\n * 4 = rinkeby\n */\nconst supportedChainIds = [4];\n\n/**\n * Include the connectors you want to support\n * injected - MetaMask\n * magic - Magic Link\n * walletconnect - Wallet Connect\n * walletlink - Coinbase Wallet\n */\nconst connectors = {\n  injected: {},\n};\n\n// wrap App with ThirdwebWeb3Provider\nReactDOM.render(\n  <React.StrictMode>\n    <ThirdwebWeb3Provider\n      connectors={connectors}\n      supportedChainIds={supportedChainIds}\n    >\n      <div className=\"landing\">\n        <App />\n      </div>\n    </ThirdwebWeb3Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}