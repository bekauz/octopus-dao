{"version":3,"sources":["App.jsx","index.js"],"names":["sdk","ThirdwebSDK","bundleDrop","getBundleDropModule","tokenModule","getTokenModule","voteModule","getVoteModule","App","useWeb3","connectWallet","address","error","provider","console","log","signer","getSigner","undefined","useState","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","useEffect","getAllClaimerAddresses","then","addresses","catch","err","getAllHolderBalances","amounts","memberList","useMemo","map","tokenAmount","ethers","utils","formatUnits","setProviderOrSigner","balanceOf","balance","gt","getAll","activeProposals","length","proposalId","voteStatus","name","className","onClick","elevatedZIndex","zIndex","src","process","alt","style","position","left","top","width","member","str","substring","onSubmit","e","a","preventDefault","stopPropagation","votes","proposal","voteResult","vote","forEach","document","getElementById","type","checked","getDelegationOf","constants","AddressZero","delegateTo","Promise","all","get","state","execute","index","description","id","value","defaultChecked","htmlFor","label","disabled","claim","finally","ReactDOM","render","StrictMode","connectors","injected","supportedChainIds"],"mappings":"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","file":"static/js/main.ac7a2774.chunk.js","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ethers } from \"ethers\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst bundleDrop = sdk.getBundleDropModule(\n  \"0x9E92B1F2B0C7CE7497040ac89eCD2d032E4d01F7\",\n);\nconst tokenModule = sdk.getTokenModule(\n  \"0xcb4D31e042D6DaF220653D092D51b0Aa43f554ec\"\n);\nconst voteModule = sdk.getVoteModule(\n  \"0xF2bC16309dDB09f36e2254101c235D422FE2bE7F\"\n  );\n\n\nconst App = () => {\n  // connectWallet hook from thirdWeb\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"Connected with address:\", address)\n\n  // used to sign txs on the blockchain (for writing)\n  const signer = provider ? provider.getSigner() : undefined;\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n  const [isClaiming, setIsClaiming] = useState(false);\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n  const [memberAddresses, setMemberAddresses] = useState([]);\n  const [proposals, setProposals] = useState([]);\n  const [isVoting, setIsVoting] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false);\n\n  const shortenAddress = (str) => {\n    return `${str.substring(0, 6)}...${str.substring(str.length - 4)}`;\n  };\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    // grab addresses of users who hold the NFT \n    bundleDrop\n      .getAllClaimerAddresses(\"0\")\n      .then((addresses) => {\n        console.log(\"members addresses: \", addresses);\n        setMemberAddresses(addresses);\n      }).catch((err) => {\n        console.error(\"failed to retrieve member list\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    // grab balances of users who hold the erc-20 token\n    tokenModule\n      .getAllHolderBalances()\n      .then((amounts) => {\n        console.log(\"holder amounts\", amounts);\n        setMemberTokenAmounts(amounts);\n      }).catch((err) => {\n        console.error(\"failed to retrieve token amounts\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // combine memberAddresses and memberTokenAmounts\n  const memberList = useMemo(() => {\n    return memberAddresses.map((address) => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits(\n          // return 0 if address is not in memberTokenAmounts\n          memberTokenAmounts[address] || 0,\n        ),\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]);\n\n  useEffect(() => {\n    // pass signer to the sdk\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n\n  useEffect(() => {\n    // skip if user has not connected the wallet yet\n    if (!address) {\n      return;\n    }\n    // check if the user has the membership nft\n    return bundleDrop\n    .balanceOf(address, \"0\")\n    .then((balance) => {\n      if (balance.gt(0)) {\n        setHasClaimedNFT(true);\n        console.log(\"user has the membership NFT\");\n      } else {\n        setHasClaimedNFT(false);\n        console.log(\"user does not have the membership NFT\");\n      }\n    }).catch((error) => {\n      setHasClaimedNFT(false);\n      console.error(\"failed to get balance\", error);\n    });\n  }, [address]);\n\n  // retrieve all active proposals from the contract\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    voteModule\n      .getAll()\n      .then((activeProposals) => {\n        setProposals(activeProposals);\n        console.log(\"proposals:\", activeProposals);\n      }).catch((err) => {\n        console.error(\"failed to retrieve proposals\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // check if user has voted \n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    // if proposals have not been retrieved yet\n    if (!proposals.length) {\n      return;\n    }\n\n    voteModule\n      .hasVoted(proposals[0].proposalId, address)\n      .then((voteStatus) => {\n        setHasVoted(voteStatus);\n        console.log(\"user has already voted\");\n      }).catch((err) => {\n        console.error(\"failed to check user vote status\", err);\n      });\n  }, [hasClaimedNFT, proposals, address]);\n  \n  if (error && error.name === \"UnsupportedChainIdError\") {\n    return (\n      <div className=\"unsupported-network\">\n        <h2>Please connect to Rinkeby</h2>\n        <p>\n          OctopusDAO currently supports Rinkeby network only.\n          Please switch the network in your connected wallet.\n        </p>\n      </div>\n    );\n  }\n\n  // if user hasn't connected the wallet, display an option to do so\n  if (!address) {\n    return (\n      <div className=\"landing\">\n        <h1>Welcome to OctopusDAO</h1>\n        <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n          Connect your wallet\n        </button>\n      </div>\n    );\n  }\n\n  const bgImgStyling = {\n    zIndex: \"0\",\n    position: \"absolute\",\n    left: \"0\",\n    top: \"0\",\n    width: \"50vw\",\n  }\n\n  const elevatedZIndex = {\n    zIndex: \"1\",\n  }\n\n  // display internal DAO page for users who have claimed the NFT\n  if (hasClaimedNFT) {\n    return (\n      <div className=\"member-page\"> \n        <img \n          src={`${process.env.PUBLIC_URL}/octopus_home.png`} \n          alt=\"home-octopus\" \n          style={bgImgStyling} \n        />\n        <h1 style={elevatedZIndex}>OctopusDAO Member Page</h1>\n        <div style={elevatedZIndex}>\n          <div>\n            <h2>Member List</h2>\n            <table className=\"card\">\n              <thead>\n                <tr>\n                  <th>Address</th>\n                  <th>Token Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {memberList.map((member) => {\n                  return (\n                    <tr key={member.address}>\n                      <td>{shortenAddress(member.address)}</td>\n                      <td>{member.tokenAmount}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          <div>\n            <h2>Active Proposals</h2>\n            <form\n              onSubmit={async (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                // disable button before entering async mode\n                setIsVoting(true);\n\n                // grab votes from the form into values\n                const votes = proposals.map((proposal) => {\n                  // 2 = abstrain (default)\n                  let voteResult = {\n                    proposalId: proposal.proposalId,\n                    vote: 2,\n                  };\n                  proposal.votes.forEach((vote) => {\n                    const elem = document.getElementById(\n                      `${proposal.proposalId}-${vote.type}`\n                    );\n                    if (elem.checked) {\n                      voteResult.vote = vote.type;\n                      return;\n                    }\n                  });\n                  return voteResult;\n                });\n\n                // validate that user delegates their token to vote\n                try {\n                  const delegation = await tokenModule.getDelegationOf(address);\n                  // check if user hasn't delegated their gov tokens yet\n                  if (delegation === ethers.constants.AddressZero) {\n                    await tokenModule.delegateTo(address);\n                  }\n                  // vote on proposals\n                  try {\n                    await Promise.all(\n                      votes.map(async (vote) => {\n                        // check if proposal is open for voting\n                        const proposal = await voteModule.get(vote.proposalId);\n                        // vote if it is, continue otherwise\n                        if (proposal.state === 1) {\n                          return voteModule.vote(vote.proposalId, vote.vote);\n                        }\n                        return;\n                      })\n                    );\n                    try {\n                      // execute proposals ready to be executed (state 4)\n                      await Promise.all(\n                        votes.map(async (vote) => {\n                          const proposal = await voteModule.get(vote.proposalId);\n                          if (proposal.state === 4) {\n                            return voteModule.execute(vote.proposalId);\n                          }\n                        })\n                      );\n                      setHasVoted(true);\n                      console.log(\"successfully voted\");\n                    } catch (err) {\n                      console.error(\"failed to execute vote\", err);\n                    }\n                  } catch (err) {\n                    console.error(\"failed to vote\", err);\n                  } \n                } catch (err) {\n                  console.error(\"failed to delegate tokens\");\n                } finally {\n                  // re-enable button regardless\n                  setIsVoting(false);\n                }\n              }}\n            >\n             {proposals.map((proposal, index) => (\n                <div key={proposal.proposalId} className=\"card\">\n                  <h5>{proposal.description}</h5>\n                  <div>\n                    {proposal.votes.map((vote) => (\n                      <div key={vote.type}>\n                        <input\n                          type=\"radio\"\n                          id={proposal.proposalId + \"-\" + vote.type}\n                          name={proposal.proposalId}\n                          value={vote.type}\n                          //default the \"abstain\" vote to chedked\n                          defaultChecked={vote.type === 2}\n                        />\n                        <label htmlFor={proposal.proposalId + \"-\" + vote.type}>\n                          {vote.label}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n              <button disabled={isVoting || hasVoted} type=\"submit\">\n                {isVoting\n                  ? \"Voting...\"\n                  : hasVoted\n                    ? \"You Already Voted\"\n                    : \"Submit Votes\"}\n              </button>\n              <small>\n                This will trigger multiple transactions that you will need to\n                sign.\n              </small>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const mintNft = () => {\n    setIsClaiming(true);\n    bundleDrop\n      .claim(\"0\", 1)\n      .catch((err) => {\n        setIsClaiming(false);\n        console.error(\"failed to claim\", err);\n      }).finally(() => {\n        setIsClaiming(false);\n        setHasClaimedNFT(true);\n        console.log(\"Sucessfully minted!\");\n        console.log(`See it on OpenSea: https://testnets.opensea.io/assets/${bundleDrop.address}/0`);\n      });\n  }\n\n  // Render mint nft screen.\n  return (\n    <div className=\"mint-nft\">\n      <h1>Mint your free OctopusDAO Membership NFT</h1>\n      <button\n        disabled={isClaiming}\n        onClick={() => mintNft()}\n      >\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n      </button>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ThirdwebWeb3Provider } from '@3rdweb/hooks';\n\n/**\n * 1 = mainnet\n * 3 = ropsten\n * 4 = rinkeby\n */\nconst supportedChainIds = [4];\n\n/**\n * Include the connectors you want to support\n * injected - MetaMask\n * magic - Magic Link\n * walletconnect - Wallet Connect\n * walletlink - Coinbase Wallet\n */\nconst connectors = {\n  injected: {},\n};\n\n// wrap App with ThirdwebWeb3Provider\nReactDOM.render(\n  <React.StrictMode>\n    <ThirdwebWeb3Provider\n      connectors={connectors}\n      supportedChainIds={supportedChainIds}\n    >\n      <div className=\"landing\">\n        <App />\n      </div>\n    </ThirdwebWeb3Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}